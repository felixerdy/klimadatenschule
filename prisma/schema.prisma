generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(uuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Dataset {
  id          String   @id @default(uuid())
  title       String
  description String
  filepath    String
  filetype    String
  data        Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  official    Boolean  @default(false)
  publisherId String?
  publisher   User?    @relation(fields: [publisherId], references: [id])
}

model User {
  id                  String           @id @default(uuid())
  name                String?
  email               String?          @unique
  emailVerified       DateTime?        @map("email_verified")
  image               String?
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  role                Role             @default(USER)
  organisationId      String?
  organisation        Organisation?    @relation(fields: [organisationId], references: [id])
  datasets            Dataset[]
  posts               Post[]
  MobilityRecord      MobilityRecord[]
  NutritionRecord     MealRecord[]
  TreeRecord          TreeRecord[]
  PaperRecord         PaperRecord[]
  createdOrganisation Organisation[]   @relation("createdBy")

  @@map("users")
}

enum Role {
  USER
  TEACHER
  ADMIN
}

model Account {
  id                 String    @id @default(uuid())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model Organisation {
  id        String           @id @default(uuid())
  name      String
  User      User[]
  type      OrganisationType @default(SCHOOL)
  createdBy User             @relation("createdBy", fields: [userId], references: [id])
  userId    String           @default("d126efe1-d0c4-4f43-8514-c3dd6fb66a7e")
}

enum OrganisationType {
  SCHOOL
  ORGANISATION
}

model MobilityRecord {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pkw       Float
  bahn      Float
  bus       Float
  ubahn     Float
  fahrrad   Float
  fuss      Float
  timestamp DateTime @default(now())
}

model MealRecord {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  co2       Float
  count     Int      @default(1)
  timestamp DateTime @default(now())
}

model TreeRecord {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  circumference Float
  height        Float
  latitude      Float
  longitude     Float
  co2           Float    @default(0)
}

model PaperRecord {
  id                     String   @id @default(uuid())
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @map("updated_at")
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String
  a4                     Float
  a5                     Float
  a6                     Float
  collegeblock           Float
  zeichenmappe           Float
  a4_recycling           Float    @default(0)
  a5_recycling           Float    @default(0)
  a6_recycling           Float    @default(0)
  collegeblock_recycling Float    @default(0)
  zeichenmappe_recycling Float    @default(0)
}
